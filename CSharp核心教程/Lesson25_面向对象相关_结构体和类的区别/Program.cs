using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Lesson25_面向对象相关_结构体和类的区别
{
	class Program
	{
		static void Main(string[] args)
		{
			Console.WriteLine("■ Lesson 25 | 结构体和类的区别");

			#region 区别概述 |
			// 结构体和类的最大区别体现在存储空间上，因为结构体是值，类是引用，
			// 因此他们存储位置一个在栈上，一个在堆上，
			// 通过之前知识点的学习，相信可以看出，结构体和类在使用时的唯一区别在于 => 值和引用类型在赋值时的区别

			// 结构体和类在使用上很类似，结构体甚至可以使用面向对象的思想来形容一类对象。
			// 结构体具备着面向对象思想中封装的特性，但是结构体不具备继承和多态的特征，因此大大减少了结构体的使用频率。
			// 由于结构体不具备继承的特征，所以结构体不能使用 protected 访问修饰符修饰。
			#endregion

			#region 细节区别 |
			// 1.  结构体是值类型，类是引用类型
			// 2.  结构体存储在栈内存中，类存储在堆内存中
			// 3.  结构体成员不可以使用 protected 访问修饰符，而类可以
			// 4.  结构体成员变量申明不能指定初始值，而类可以
			// 5.  结构体不能申明无参数的构造函数，而类可以
			// 6.  结构体申明了有参构造函数以后，无参构造函数不会被顶掉
			// 7.  结构体不能申明析构函数，而类可以
			// 8.  结构体不能被继承，而类可以
			// 9.  结构体要在构造函数中初始化所有成员变量，而类可以
			// 10. 结构体不能被静态修饰符 static 修饰( 结构体不存在静态结构体 )，而类可以
			// 11. 结构体不能再自己内部申明和自己一样的结构体变量，而类可以
			#endregion

			#region 注意 | 结构体的特别之处
			// 结构体可以继承【接口】，因为接口是行为的抽象
			#endregion

			#region 实践 | 如何选择结构体和类
			// 1. 想要使用【继承】和【多态】，直接淘汰结构体
			//    >>> 比如：玩家、怪物等等
			// 2. 对象是【数据集合】时，优先考虑结构体
			//    >>> 比如：位置、坐标等等
			// 3. 从值类型和引用类型赋值时的区别上去考虑，比如经常被赋值传递的对象，并且改变赋值对象，而原对象不想被改变的，可以使用结构体
			//    >>> 比如：坐标、位置、旋转等等
			#endregion
		}
	}
}
